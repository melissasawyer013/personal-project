
// working for redirect to update-form with form data accessible through user
router.use(session({
    secret: 'codesquad',
    cookie: {
        maxAge: 1000 * 60 * 60 * 24 * 7
    },
    store: new MongoStore({
        url: dbURL
    }),
    resave: false,
    saveUninitialized: false,
    cookie: {secure: false}
    
}));
router.use(flash());
router.use(passport.initialize());
router.use(passport.session());


// working for redirect to update-form with form data accessible through user
passport.use(new LocalStrategy({username: 'username'}, (username, password, done) => {
    dbHandler.collection(collectionUserForm).find({username: username}).toArray((err, user) => {
        let userObject = user[0];
        if(err) {
            console.log(`there was an error`);
            return err;
        }
        bcrypt.compare(password, userObject.password, (err, isMatch) => {
            if(err) return done(err, null);
            if (isMatch) return done(null, userObject);

             
                console.log('passwords do not match')
                return done(null, false);
            
        });
    })
}
));

// working for redirect to update-form with form data accessible through user
passport.serializeUser((user, done) => {
    console.log(`user ${user} serialized`);
    done(null, user);
});
passport.deserializeUser((username, done) => {
    done(null, {username: username});
})




//logout handle
router.get('/logout', (req, res) => {
    req.logout();
    req.flash('success_msg', 'You are logged out');
    res.redirect('login')
});

// working for redirect to update-form with form data accessible through user
router.post('/sendLogin', 
    passport.authenticate('local'), 
    (req, res, next) => {
        console.log('is the user authenticated')
        console.log(req.isAuthenticated())
        res.render('pages/update-form', {
            'user': req.user,
        })
    }
    
);

// working for redirect to update-form with form data accessible through user
router.get('/update-form', ensure.ensureLoggedIn(),
(req, res) => {
    dbHandler.collection(collectionUserForm).findOne({username: req.user.username}).toArray((err, user) => {
        if(err) return console.log(err)
        let userObject = user[0]
        console.log(userObject)
        if(user) res.render('pages/update-form', {user: userObject})
    })
});